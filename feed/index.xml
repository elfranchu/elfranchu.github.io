<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Programando</title>
	<atom:link href="/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Tutoriales y artículos de programación.</description>
	<lastBuildDate>Wed, 14 Dec 2016 17:10:52 +0000</lastBuildDate>
	<language>es-ES</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7.6</generator>
<site xmlns="com-wordpress:feed-additions:1">121132704</site>	<item>
		<title>ASP.NET MVC renderizado vista vs parciales vs visibilidad por javascript</title>
		<link>/2016/12/14/asp-net-mvc-renderizado-vista-vs-parciales-vs-visibilidad-por-javascript/</link>
		<comments>/2016/12/14/asp-net-mvc-renderizado-vista-vs-parciales-vs-visibilidad-por-javascript/#respond</comments>
		<pubDate>Wed, 14 Dec 2016 16:45:57 +0000</pubDate>
		<dc:creator><![CDATA[fjmenendez]]></dc:creator>
				<category><![CDATA[Web]]></category>
		<category><![CDATA[ASP.NET MVC]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[JQuery]]></category>
		<category><![CDATA[MVC]]></category>

		<guid isPermaLink="false">/?p=269</guid>
		<description><![CDATA[En este artículo, vamos a hacer una comparativa del “renderizado” o “pintado” de una vista en ASP.NET MVC de tres formas distintas. La primera es la más básica petición de la vista al controlador. En una segunda parte veremos cómo dividir la vista en vistas parciales. Como tercer punto solicitaremos sólo la parte que necesitamos [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>En este artículo, vamos a hacer una comparativa del “<strong><em>renderizado</em></strong>” o “pintado” de una vista en <strong>ASP.NET MVC</strong> de tres formas distintas.</p>
<ol>
<li>La primera es la más <strong>básica</strong> petición de la vista al controlador.</li>
<li>En una segunda parte veremos cómo dividir la vista en <strong>vistas parciales</strong>.</li>
<li>Como tercer punto solicitaremos <strong>sólo la parte que necesitamos actualizar</strong> mediante el uso de vistas parciales.</li>
<li>Y por último, en vez de refrescar la información, pasaremos a obtenerla en la primera petición del “html” y <strong>“jugaremos” con la visibilidad</strong>.</li>
</ol>
<p>Como ejemplo intentaremos mostrar tres páginas:</p>
<ul>
<li>Inicio</li>
<li>Información</li>
<li>Contacto.</li>
</ul>
<p>Podéis <a href="https://github.com/elfranchu/Carga-Vistas-Parciales">descargar </a>el código en GitHub.</p>
<p><a href="https://github.com/elfranchu/Carga-Vistas-Parciales">https://github.com/elfranchu/Carga-Vistas-Parciales</a></p>
<p>Para comenzar, vamos a crear un  nuevo proyecto de ASP.Net MVC</p>
<p><a href="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto1.png"><img class="alignnone size-medium wp-image-275" src="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto1.png?resize=300%2C169" alt="" srcset="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto1.png?resize=300%2C169 300w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto1.png?resize=768%2C432 768w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto1.png?resize=1024%2C576 1024w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto1.png?resize=848%2C477 848w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto1.png?w=1366 1366w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1" /></a></p>
<p>&nbsp;</p>
<p>Elegimos como plantilla uno que este vacío, para no tener demasiadas distracciones.</p>
<p><u><a href="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto-2.png"><img class="alignnone size-medium wp-image-276" src="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto-2.png?resize=300%2C169" alt="" srcset="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto-2.png?resize=300%2C169 300w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto-2.png?resize=768%2C432 768w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto-2.png?resize=1024%2C576 1024w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto-2.png?resize=848%2C477 848w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/crear-proyecto-2.png?w=1366 1366w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1" /></a></u></p>
<p><strong>Modelos</strong></p>
<p>&nbsp;</p>
<p>Crearemos los modelos que utiliza el controlador anterior</p>
<p><a href="https://i0.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-modelo.png"><img class="alignnone size-medium wp-image-273" src="https://i0.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-modelo.png?resize=300%2C169" alt="" srcset="https://i0.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-modelo.png?resize=300%2C169 300w, https://i0.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-modelo.png?resize=768%2C432 768w, https://i0.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-modelo.png?resize=1024%2C576 1024w, https://i0.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-modelo.png?resize=848%2C477 848w, https://i0.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-modelo.png?w=1366 1366w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1" /></a></p>
<p>&nbsp;</p>
<p>En primer lugar un modelo para el contenido de la página</p>
<pre>public class PageContent
{
   public string Title { get; set; }
   
   public string Description { get; set; }
}</pre>
<p>&nbsp;</p>
<p>Así el PageContent, será distinto para cada página.</p>
<p>Crearemos una enumeración que identifique cada página</p>
<pre>public enum EnumViewMode
{
   Index,
   Info,
   Contact
}</pre>
<p>&nbsp;</p>
<p>Agregaremos un modelo que englobe la información anterior junto con los <strong>elementos comunes</strong> a todas las páginas, que podrían ser la “Cabecera” y el “Pie de página”.</p>
<pre>public class MyModel
{
  public string Header { get; set; }
  
  public PageContent MainContent { get; set; }
  public string Footer { get; set; }

  public EnumViewMode ViewMode { get; set; }
}</pre>
<p>Y un modelo avanzado para el último caso</p>
<pre>public class MyModelAllInOne
{
  public string Header { get; set; }
  public PageContent IndexMainContent { get; set; }
  public PageContent InfoMainContent { get; set; }
  public PageContent ContactMainContent { get; set; }
  public string Footer { get; set; }
  public EnumViewMode ViewMode { get; set; }
}</pre>
<p>En el que podríamos decir que viajaría toda la información de estas tres páginas.<br />
Agregamos una carpeta “Home” en la carpeta Views y en ella una vista “Index.cshtml”</p>
<p><a href="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-vista.png"><img class="alignnone size-medium wp-image-274" src="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-vista.png?resize=300%2C169" alt="" srcset="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-vista.png?resize=300%2C169 300w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-vista.png?resize=768%2C432 768w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-vista.png?resize=1024%2C576 1024w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-vista.png?resize=848%2C477 848w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-vista.png?w=1366 1366w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1" /></a></p>
<p>Como ya sabréis, esta vista  se alimentará de un controlador  HomeController, lo creamos.</p>
<p><a href="https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-controlador.png"><img class="alignnone size-medium wp-image-272" src="https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-controlador.png?resize=300%2C169" alt="" srcset="https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-controlador.png?resize=300%2C169 300w, https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-controlador.png?resize=768%2C432 768w, https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-controlador.png?resize=1024%2C576 1024w, https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-controlador.png?resize=848%2C477 848w, https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/agregar-controlador.png?w=1366 1366w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1" /></a></p>
<pre>public class HomeController : Controller
{
   // GET: /Home/
   public ActionResult Index()
  {  
  }
}
</pre>
<p>&nbsp;</p>
<p>La estructura de vistas y controladores debería quedar así:</p>
<p><a href="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-controladores.jpg"><img class="alignnone size-medium wp-image-277" src="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-controladores.jpg?resize=300%2C169" alt="" srcset="https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-controladores.jpg?resize=300%2C169 300w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-controladores.jpg?resize=768%2C432 768w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-controladores.jpg?resize=1024%2C576 1024w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-controladores.jpg?resize=848%2C477 848w, https://i1.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-controladores.jpg?w=1366 1366w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1" /></a></p>
<p>&nbsp;</p>
<p>Y la estructura de vistas tal que así</p>
<p><a href="https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-vistas.jpg"><img class="alignnone size-medium wp-image-278" src="https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-vistas.jpg?resize=300%2C169" alt="" srcset="https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-vistas.jpg?resize=300%2C169 300w, https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-vistas.jpg?resize=768%2C432 768w, https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-vistas.jpg?resize=1024%2C576 1024w, https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-vistas.jpg?resize=848%2C477 848w, https://i2.wp.com/programando.com.es/wp-content/uploads/2016/12/estructura-de-vistas.jpg?w=1366 1366w" sizes="(max-width: 300px) 100vw, 300px" data-recalc-dims="1" /></a></p>
<h2><strong>1.- Petición de la vista al controlador.</strong></h2>
<p>Para esta parte, usaremos el controlador home, para simplemente atender las peticiones de vista.</p>
<p>Recordemos que queremos el contenido de 3 vistas, Inicio, Información y Contacto, en el controlador<strong> devolvemos un modelo lleno para cada vista</strong></p>
<pre>public class HomeController : Controller
 {
 //
 // GET: /Home/

 public ActionResult Index()
 {
 MyModel m = new MyModel();
 m.Header = string.Format("Parte de Cabecera Actualizada:{0}", DateTime.Now);
 m.Footer = string.Format("Parte de Pie de Página Actualizada:{0}", DateTime.Now);

 m.MainContent = new PageContent();
 m.MainContent.Title = "Página de Inicio";
 m.MainContent.Description = "Esta es la descripción de la página de Inicio:Lorem . . . .. . .";
 return View(m);
 }

 public ActionResult Info()
 {
 MyModel m = new MyModel();
 m.Header = string.Format("Parte de Cabecera Actualizada:{0}", DateTime.Now);
 m.Footer = string.Format("Parte de Pie de Página Actualizada:{0}", DateTime.Now);

 m.MainContent = new PageContent();
 m.MainContent.Title = "Página de Información";
 m.MainContent.Description = "Esta es la descripción de la página de Información:Lorem ipsum. . . .. . .";
 return View(m);
 }

 public ActionResult Contact()
 {
 MyModel m = new MyModel();
 m.Header = string.Format("Parte de Cabecera Actualizada:{0}", DateTime.Now);
 m.Footer = string.Format("Parte de Pie de Página Actualizada:{0}", DateTime.Now);

 m.MainContent = new PageContent();
 m.MainContent.Title = "Página de Contacto";
 m.MainContent.Description = "Esta es la descripción de la página de Contacto:Lorem ipsum dol. . . .. . .";

 return View(m);
 }
 
 }</pre>
<p>&nbsp;</p>
<p>Y en la vista, construimos el html, a partir del modelo devuelto por el controlador con sintaxis <strong>razor</strong>.</p>
<pre>@model DynamicPartialLoad.Models.MyModel
@{
 ViewBag.Title = "Index";
}
@Html.Partial("_menu")
&lt;h2&gt;@Model.Header&lt;/h2&gt;
&lt;h2&gt;Pagina de inicio&lt;/h2&gt;
&lt;div&gt;
 &lt;p&gt;Estos datos vienen del controlador, a través del modelo:&lt;/p&gt;
 &lt;h2&gt;Title: @Model.MainContent.Title&lt;/h2&gt;
 &lt;p&gt;Description: @Model.MainContent.Description&lt;/p&gt;
&lt;/div&gt;
</pre>
<h2>2<strong>.-</strong> Dividir la vista en parciales.</h2>
<p>Vemos que las peticiones de las tres vistas tienen en común la cabecera y el pie de página, o lo que es lo mismo, discrepan en la parte central.<br />
Pues bien crearemos una vista parcial para cada vista anterior y <em>transformaremos</em> la vista para que “pinte” estas parciales</p>
<pre>&lt;div id="contenidocentral"&gt;

 @if (Model.ViewMode == EnumViewMode.Index)
 {
 @Html.Partial("_partialIndex", Model.MainContent)
 }
 else if (Model.ViewMode == EnumViewMode.Contact)
 {
 @Html.Partial("_partialContact", Model.MainContent)
 }
 else if (Model.ViewMode == EnumViewMode.Info)
 {
 @Html.Partial("__partialInfo", Model.MainContent)
 }
 &lt;/div&gt;</pre>
<p>El controlador devuelve en el modelo el contenido de la vista parcial</p>
<pre>public class UsarParcialesController : Controller
{
public ActionResult Index(string id)
{
MyModel m = new MyModel();
m.Header = string.Format("Parte de Cabecera Actualizada:{0}", DateTime.Now);
m.Footer = string.Format("Parte de Pie de Página Actualizada:{0}", DateTime.Now);
if (id == "Info")
{
  m.MainContent = new PageContent()
 {
  Title = "Página de Información",
  Description = "Esta es la descripción de la página de VER CÓDIGO COMPLETO EN GitHub"
 };
}

/*Ver código completo*/

return View(m);

}</pre>
<p>&nbsp;</p>
<h2>3.-Cargar sólo la parte a actualizar</h2>
<p>Además de que el controlador devuelva en el modelo el contenido de la vista parcial, hay ocasiones en las que no sería necesario pedir toda la página sino que se puede realizar una petición de página parcial.</p>
<p>Por ejemplo, si estamos en la página de “información” y queremos ver la página de “contacto”, y dado que estas comparten la cabecera y el pie de página, <strong>lo único que necesitamos actualizar es el contenido central.</strong></p>
<p>Así, siguiendo con el ejemplo anterior, nos encontramos en la página de “información”, y tenemos un link que nos lleva a la página de “contacto”</p>
<pre>&lt;div&gt;
   &lt;a class="contactlink" href="/CargarParciales/CenterAsPartial/Contact"&gt;Contacto&lt;/a&gt;
&lt;/div&gt;</pre>
<p>&nbsp;</p>
<p>Con <strong>JQuery</strong>, capturamos el evento click de este link</p>
<pre>$(".contactlink").click(function (e) {

// se ha producido un click en el link

e.preventDefault();

});
</pre>
<p>Y cargamos  la vista parcial en la parte central en concreto en la capa cuyo id es “contenidocentral”.</p>
<pre>$(document).ready(function () {

function LoadPartial(obj) {

//Cargar la url de la parcial

var url = $(obj).attr('href')

console.debug(url);

$("#contenidocentral").load(url);

}

 

$(".contactlink").click(function (e) {

LoadPartial(this);

e.preventDefault();

});
</pre>
<p>Al ejecutar la función load, se hace una petición al controlador que no devuelve el html de la  página, sino la parte de la parcial, con este html se reemplaza el contenido de la capa “contenidocentral” .</p>
<pre>public ActionResult CenterAsPartial(string id)
{
PageContent m = new PageContent();
if (id == "Contact")
{
m = new PageContent();
{
Title = "Página de Contacto",
Description = "Esta es la descripción de la página de Contacto:………….."
};

return PartialView("_partialContact", m);

}

}

</pre>
<p>&nbsp;</p>
<h2>4.- Obtención en una simple petición</h2>
<p>Por último, en vez de refrescar la información, pasaremos a <strong>obtenerla en la primera petición del “html”</strong> y “jugaremos” con la visibilidad. Esta forma aunque no muy ortodoxa tiene claras ventajas para páginas pequeñas, normalmente alojadas en servidores compartidos y donde una cada petición tarda bastante.</p>
<p>Con una sola petición se podría tener todo el html, eso sí sería más grande.</p>
<p>Necesitamos un nuevo modelo para desarrollar esta parte</p>
<pre>public class MyModelAllInOne
{
public string Header { get; set; }

public PageContent IndexMainContent { get; set; }

public PageContent InfoMainContent { get; set; }

public PageContent ContactMainContent { get; set; }

public string Footer { get; set; }

public EnumViewMode ViewMode { get; set; }

}
</pre>
<p>Como hemos dicho, en una sola petición debe ir nuestro sitio completo, por eso este modelo lleva una “cabecera” y un “pie”, que son comunes a todas las páginas y tres contenidos “Inicio”, “Información” y “Contacto”.</p>
<p>&nbsp;</p>
<p>Nuestro código para la vista sería:</p>
<pre>@Html.Partial("_menu")

&lt;h2&gt;@Model.Header&lt;/h2&gt;

&lt;div id="indexdiv"&gt;

 

&lt;h2&gt;Pagina de Inicio con parcial&lt;/h2&gt;

&lt;div&gt;

&lt;span&gt;Contenido Actualizado: @DateTime.Now.ToString()&lt;/span&gt;

&lt;br&gt;

&lt;p&gt;Estos datos vienen del controlador, a través del modelo:&lt;/p&gt;

&lt;h2&gt;Title: @Model.IndexMainContent.Title&lt;/h2&gt;

&lt;p&gt;Description: @Model.IndexMainContent.Description&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id="infodiv"&gt;

 

&lt;h2&gt;Pagina de Información con parcial&lt;/h2&gt;

&lt;div&gt;

&lt;span&gt;Contenido Actualizado: @DateTime.Now.ToString()&lt;/span&gt;

&lt;br&gt;

&lt;p&gt;Estos datos vienen del controlador, a través del modelo:&lt;/p&gt;

&lt;h2&gt;Title: @Model.InfoMainContent.Title&lt;/h2&gt;

&lt;p&gt;Description: @Model.InfoMainContent.Description&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id="contactdiv"&gt;

 

&lt;h2&gt;Pagina de Contacto con parcial&lt;/h2&gt;

&lt;div&gt;

&lt;span&gt;Contenido Actualizado: @DateTime.Now.ToString()&lt;/span&gt;

&lt;br&gt;

&lt;p&gt;Estos datos vienen del controlador, a través del modelo:&lt;/p&gt;

&lt;h2&gt;Title: @Model.ContactMainContent.Title&lt;/h2&gt;

&lt;p&gt;Description: @Model.ContactMainContent.Description&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

 

&lt;h2&gt;@Model.Footer&lt;/h2&gt;

 
</pre>
<p>A destacar tres capas en donde irán pintadas cada parcial “indexdiv”, &#8220;infodiv&#8221; y</p>
<p>&#8220;contactdiv&#8221;.</p>
<p>Como sólo queremos que se vea una, modificaremos su visibilidad dinámicamente con JQuery® en función de la url.</p>
<p>&nbsp;</p>
<pre>if (window.location.href.endsWith("AllInOne/Index") == false)

$("#indexdiv").hide();

if (window.location.href.endsWith("AllInOne/Info") == false)

$("#infodiv").hide();

if (window.location.href.endsWith("AllInOne/Contact") == false)

$("#contactdiv").hide();
</pre>
<p>&nbsp;</p>
<p>Como en  el ejemplo anterior, estamos en la página de “información” y queremos ver la página de “contacto”</p>
<pre>&lt;div&gt;

&lt;a class="contactlinkjquery" href="/AllInOne/Contact"&gt;Contacto&lt;/a&gt;    &lt;/div&gt;
</pre>
<p>Con JQuery, capturamos el evento click de este link, y modificamos la visibilidad de las capas, dependiendo de los parámetros de la url.</p>
<p>Modificamos además el historial de Html5, para permitir el refresco de página</p>
<pre>$(".contactlinkjquery").click(function (e) {

ShowPartial(this);

e.preventDefault();

});




function ShowPartial(obj) {

var url = $(obj).attr('href')

// Ocultamos todas las capas

$("#indexdiv").hide();

$("#infodiv").hide();

$("#contactdiv").hide();




if (url.indexOf('/Index') &gt; 0) {

$("#indexdiv").show();

history.pushState(null, "Inicio", "Index");

}

if (url.indexOf('/Contact') &gt; 0) {

$("#contactdiv").show();

history.pushState(null, "Contacto", "Contact");

}

if (url.indexOf('/Info') &gt; 0) {

$("#infodiv").show();

history.pushState(null, "Info", "Info");

}

}</pre>
<p>&nbsp;</p>
<p>Bueno, menuda parrafada.</p>
<p>Espero haberos introducido múltiples dudas sobre el mundo de las parciales, y que comentéis</p>
<p>Gracias</p>
<p><em>&#8220;El ignorante afirma; el sabio duda y reflexiona.&#8221;,  <a href="https://es.wikiquote.org/wiki/Arist%C3%B3teles">Aristóteles</a></em></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>/2016/12/14/asp-net-mvc-renderizado-vista-vs-parciales-vs-visibilidad-por-javascript/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">269</post-id>	</item>
		<item>
		<title>Estrella de navidad con html5</title>
		<link>/2016/12/11/estrella-de-navidad-con-html5/</link>
		<comments>/2016/12/11/estrella-de-navidad-con-html5/#respond</comments>
		<pubDate>Sun, 11 Dec 2016 16:40:54 +0000</pubDate>
		<dc:creator><![CDATA[fjmenendez]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Sin categoría]]></category>
		<category><![CDATA[Canvas]]></category>
		<category><![CDATA[Html5]]></category>

		<guid isPermaLink="false">http://crearpdf.es.anemone.arvixe.com/?p=252</guid>
		<description><![CDATA[Desde programando.com.es, os queremos desear feliz navidad con esta estrella de navidad hecha en html5, con el objeto canvas http://www.w3schools.com/html/html5_canvas.asp Lo primero será crear el documento html con el canvas incustrado &#60;!DOCTYPE html&#62; &#60;html&#62; &#60;head&#62; &#60;/head&#62; &#60;body&#62; &#60;canvas id="myCanvas" width="600" height="300"&#62;&#60;/canvas&#62; &#60;/body&#62; &#60;/html&#62; Le damos estilos &#60;style&#62; body { margin: 0px; padding: 0px; } myCanvas [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Desde programando.com.es, os queremos desear feliz navidad</p>
<p>con esta estrella de navidad hecha en html5, con el objeto canvas</p>
<p><a href="http://www.w3schools.com/html/html5_canvas.asp">http://www.w3schools.com/html/html5_canvas.asp</a></p>
<p><img src="https://i0.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/12/estrella.jpg?resize=602%2C302" alt="estrella de navidad" data-recalc-dims="1" /></p>
<p>Lo primero será crear el documento html con el canvas incustrado</p>
<pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;canvas id="myCanvas" width="600" height="300"&gt;&lt;/canvas&gt;

&lt;/body&gt;
&lt;/html&gt;</pre>
<p>Le damos estilos</p>
<pre>&lt;style&gt;
 body {
 margin: 0px;
 padding: 0px;
 }

myCanvas {
 background-color: red;
 }
 &lt;/style&gt;
</pre>
<p>y pintamos</p>
<pre>&lt;script&gt; 
var canvas = document.getElementById('myCanvas');
 var context = canvas.getContext('2d');</pre>
<p>//Agregamos el fondo de la capa</p>
<pre> 
var grd1 = context.createRadialGradient(0, 0, 300, 600, 300, 300);
 grd1.addColorStop(0, "#ff3333");
 grd1.addColorStop(1, "#ff6666");
 context.fillStyle = grd1;
 context.fillRect(0, 0, 600, 300);

</pre>
<p>Dibujamos la estrella</p>
<pre> 
 context.beginPath();
 context.moveTo(32, 67);
 context.lineTo(335, 103);
 context.lineTo(310, 71);
 context.lineTo(384, 85);
 context.lineTo(409, 20);
 context.lineTo(428, 86);
 context.lineTo(491, 86);
 context.lineTo(454, 131);
 context.lineTo(491, 188);
 context.lineTo(424, 171);
 context.lineTo(392, 234);
 context.lineTo(377, 174);
 context.lineTo(307, 184);
 context.lineTo(341, 146);
 context.lineTo(21, 162);
 context.lineTo(96, 144);
 context.lineTo(43, 132);
 context.lineTo(118, 109);
 context.lineTo(32, 67);
 context.lineWidth = 2;
</pre>
<p>La rellenamos</p>
<pre> var grd = context.createRadialGradient(335, 103, 300, 90, 60, 100);
 grd.addColorStop(0, "gray");
 grd.addColorStop(1, "white"); context.fillStyle = grd;
 context.fill();
 context.strokeStyle = 'gray';
context.stroke();
context.font = "30px Arial";
setTimeout(function () {
//mostramos un mensaje
context.fillText("Feliz Navidad", 10, 50);
}, 500);
&lt;/script&gt;
</pre>
<p>el archivo final sería</p>
<pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
 &lt;style&gt;
 body {
 margin: 0px;
 padding: 0px;
 }
#myCanvas {
 background-color: red;
 }
 &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
 &lt;canvas id="myCanvas" width="600" height="300"&gt;&lt;/canvas&gt;
 &lt;script&gt; 
var canvas = document.getElementById('myCanvas');
 var context = canvas.getContext('2d'); 
  //Agregamos el fondo de la capa
 var grd1 = context.createRadialGradient(0, 0, 300, 600, 300, 300);
 grd1.addColorStop(0, "#ff3333");
 grd1.addColorStop(1, "#ff6666");
 context.fillStyle = grd1;
 context.fillRect(0, 0, 600, 300); 
 //Dibujamos la estrella
 context.beginPath();
 context.moveTo(32, 67);
 context.lineTo(335, 103);
 context.lineTo(310, 71);
 context.lineTo(384, 85);
 context.lineTo(409, 20);
 context.lineTo(428, 86);
 context.lineTo(491, 86);
 context.lineTo(454, 131);
 context.lineTo(491, 188);
 context.lineTo(424, 171);
 context.lineTo(392, 234);
 context.lineTo(377, 174);
 context.lineTo(307, 184);
 context.lineTo(341, 146);
 context.lineTo(21, 162);
 context.lineTo(96, 144);
 context.lineTo(43, 132);
 context.lineTo(118, 109);
 context.lineTo(32, 67);
 context.lineWidth = 2;
 //La rellenamos
 var grd = context.createRadialGradient(335, 103, 300, 90, 60, 100);
 grd.addColorStop(0, "gray");
 grd.addColorStop(1, "white"); 
  context.fillStyle = grd;
 context.fill();
context.strokeStyle = 'gray';
context.stroke();
context.font = "30px Arial";
setTimeout(function () {
//mostramos un mensaje
context.fillText("Feliz Navidad", 10, 50);
}, 500);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>Feliz Navidad</p>
]]></content:encoded>
			<wfw:commentRss>/2016/12/11/estrella-de-navidad-con-html5/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">252</post-id>	</item>
		<item>
		<title>Os presento PhotoDream</title>
		<link>/2016/12/11/os-presento-photodream/</link>
		<comments>/2016/12/11/os-presento-photodream/#respond</comments>
		<pubDate>Sun, 11 Dec 2016 16:04:46 +0000</pubDate>
		<dc:creator><![CDATA[fjmenendez]]></dc:creator>
				<category><![CDATA[Android]]></category>
		<category><![CDATA[Sin categoría]]></category>
		<category><![CDATA[Andorid]]></category>
		<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[PhotoDream]]></category>

		<guid isPermaLink="false">http://crearpdf.es.anemone.arvixe.com/?p=192</guid>
		<description><![CDATA[El siguiente post, no es sobre programación, sino pura autopromoción. No obstante, en el futuro hablaré del código de PhotoDream. Os presento PhotoDream Probablemente la aplicación más completa que he hecho para Android No hace falta tomar una foto previa para ver como quedaría tras aplicarle el efecto, la foto con su filtro se visualiza [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>El siguiente post, no es sobre programación, sino pura autopromoción.</p>
<p>No obstante, en el futuro hablaré del código de PhotoDream.</p>
<p>Os presento PhotoDream</p>
<p><a href="http://play.google.com/store/apps/details?id=com.m2sd.photodream"><img src="https://i2.wp.com/developer.android.com/images/brand/en_app_rgb_wo_60.png?w=848" alt="Android app on Google Play" data-recalc-dims="1" /></a></p>
<p>Probablemente la aplicación más completa que he hecho para Android</p>
<p><strong>No hace falta tomar una foto previa para ver como quedaría tras aplicarle el efecto</strong>, <span style="text-decoration: underline;">la foto con su filtro se visualiza en tiempo real.</span><br />
Consigue efectos únicos e impresionantes en tus fotos <strong>totalmente gratis </strong>y compártelas con tus amigos utilizando facebook, gmail, &#8230;</p>
<div class="floatpanel">
<div class="floatpanel section">
<h3 class="AlignJustify">Imágenes</h3>
<p class="AlignJustify"><img src="https://i1.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/12//1024x500.jpg?resize=848%2C414" alt="" data-recalc-dims="1" /></p>
<p class="AlignJustify">Transforma cualquier foto haciendo que el fondo sea tu bandera nacional</p>
<p class="AlignJustify"><img src="https://i1.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/12//121203124738_51.jpg?resize=550%2C367" alt="" data-recalc-dims="1" /></p>
</div>
<div class="floatpanel section">
<h3 class="AlignJustify">Efectos</h3>
<p class="AlignJustify">PhotoDream te permite obtener cientos de efectos fotográficos combinando los distintos filtros,</p>
<p class="AlignJustify">como siempre incluyendo los clásicos efectos de retoque, cambio de color, etc..<br />
Los originales efectos tipo espejo te sorprenderán pero sin duda destacan</p>
<p class="AlignJustify">los filtros bandera (puedes transformar cualquier foto haciendo que parezca</p>
<p class="AlignJustify">tú bandera favorita).</p>
<p class="AlignJustify"><strong>Crea tus efectos navideños.</strong></p>
<p class="AlignJustify"><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/12//121218004953_100.jpg?resize=640%2C480" alt="" data-recalc-dims="1" /></p>
<div></div>
</div>
</div>
<div class="clear section">
<h3>Cuanto cuesta descargar e instalar PhotoDream?</h3>
<p>PhotoDream es una aplicación de efectos para fotos <strong>gratis</strong>, existe una versión de pago sin publicidad(más rápida), con la que colaboras con el desarrollo de futuras aplicaciones gratuitas</p>
<p><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/12//grafico.png?resize=180%2C120" alt="" data-recalc-dims="1" /></p>
<p><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/12//130112143548_34.jpg?resize=640%2C480" alt="" data-recalc-dims="1" /></p>
<p><img src="https://i0.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/12//roundblur.png?resize=128%2C96" alt="" data-recalc-dims="1" /></p>
</div>
<p>Gracias por tú descarga.</p>
<p><a href="http://play.google.com/store/apps/details?id=com.m2sd.photodream"><img src="https://i2.wp.com/developer.android.com/images/brand/en_app_rgb_wo_60.png?w=848" alt="Android app on Google Play" data-recalc-dims="1" /></a></p>
]]></content:encoded>
			<wfw:commentRss>/2016/12/11/os-presento-photodream/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">192</post-id>	</item>
		<item>
		<title>Detección de pupila con visión artificial paso a paso.</title>
		<link>/2016/12/11/deteccion-de-pupila-con-vision-artificial-paso-a-paso/</link>
		<comments>/2016/12/11/deteccion-de-pupila-con-vision-artificial-paso-a-paso/#respond</comments>
		<pubDate>Sun, 11 Dec 2016 16:03:48 +0000</pubDate>
		<dc:creator><![CDATA[fjmenendez]]></dc:creator>
				<category><![CDATA[C++]]></category>
		<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[Visión Artificial]]></category>

		<guid isPermaLink="false">http://crearpdf.es.anemone.arvixe.com/?p=4</guid>
		<description><![CDATA[Breve introducción a la librería OpenCV Introducción Tras haber aplicado uno de los múltiples algoritmos de detección facial y de detección de ojos que se pueden encontrar realizando una búsqueda en google, vamos a intentar detectar la pupila ocular con la foto de un ojo utilizando la librería de visión artificial OpenCV y Visual Studio. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Breve introducción a la librería OpenCV</p>
<h3>Introducción</h3>
<div class="blogtext">
<p>Tras haber aplicado uno de los múltiples algoritmos de detección facial y de detección de ojos que se pueden encontrar realizando una búsqueda en google, vamos a intentar detectar la pupila ocular con la foto de un ojo utilizando la librería de visión artificial OpenCV y Visual Studio.</p>
<p><a href="http://opencv.org/">OpenCV, </a> <a href="http://es.wikipedia.org/wiki/OpenCV">http://es.wikipedia.org/wiki/OpenCV</a>  es probablemente la más potente librería de visión artificial. Originalmente desarrollada por Intel y liberada después como software libre bajo licencia GPL, ha evolucionado hasta convertirse en la base de la mayor parte de las aplicaciones de detección de movimiento, reconocimiento facial, detección de objectos, LPR (reconocimiento de matrículas), ..</p>
<table border="0" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<td><img src="https://i1.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/imagen.jpg?w=848" alt="" data-recalc-dims="1" /></td>
<td>
<h3><img src="https://i0.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/flechade.jpg?w=848" alt="" data-recalc-dims="1" /></h3>
</td>
<td>
<h3><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/resultado.jpg?w=848" alt="" data-recalc-dims="1" /></h3>
</td>
</tr>
</tbody>
</table>
<p>Podéis descargar el código fuente de este ejemplo <a href="http://crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/12/TestOpenCV.zip">aquí</a> o en <a href="https://github.com/elfranchu/deteccion-de-pupila-con-opencv">github</a></p>
<h3>Instalando Visual Studio C++ 2010 Express ® y OpenCV®</h3>
<p>Pues bien, para comenzar esta sencilla aplicación vamos a utilizar Visual Studio.</p>
<p>Si no lo hemos hecho ya, lo primero que debemos hacer es instalar  “Visual Studio C++ 2010” ®, en este caso, y dado que es un proyecto de evaluación hemos instalado la versión gratuita o  Express desde el siguiente enlace  <a href="http://www.visualstudio.com/es-es/downloads/download-visual-studio-vs#DownloadFamilies_2">http://www.visualstudio.com/es-es/downloads/download-visual-studio-vs#DownloadFamilies_2</a></p>
<p><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/descarga_visual1.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>He incluido las dlls y librerías de enlazado necesarias para este proyecto en el código fuente, pero no dudéis  en instalar la versión completa.</p>
<p>Para  ello, necesitamos descargar la librería de visión artificial OpenCV <a href="http://docs.opencv.org/trunk/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#windows-visual-studio-how-to">http://docs.opencv.org/trunk/doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv.html#windows-visual-studio-how-to</a></p>
<p>Al ejecutar el archivo .exe de la descarga para Windows, se descomprimirán los archivos en la ruta deseada, hemos elegido la ruta “D:\Trabajo\OpenCV_Project\”</p>
<p>Podemos descargar el código fuente y los binarios, nosotros en concreto y dado que estamos trabajando con un Windows 7 de 64 bits, utilizaremos las dlls que se encuentran opencv\build\x64\vc10\bin.</p>
<h3>Creando el proyecto</h3>
<p>Tras abrir Visual Studio C++ 2010 Express, elegimos la opción “Crear nueva aplicación de consola de Win32”<br />
<img src="https://i0.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/consola1.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>Es importante, desmarcar la opción encabezado precompilado.</p>
<p><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/consola2.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>Debemos indicar donde se encuentran los archivos de encabezado .h, para ello, en las propiedades del proyecto  indicamos “D:\Trabajo\OpenCV_Project\opencv\build\include” como directorio de inclusión adicional.</p>
<p><img src="https://i1.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/consola3.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>&nbsp;</p>
<p>Haremos lo mismo con las bibliotecas incluyendo la ruta “D:\Trabajo\OpenCV_Project\opencv\build\x86\vc10\lib” para resolver la dependencia de biblioteca.</p>
<p><img src="https://i1.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/consola4.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>Añadimos como entrada los archivos opencv_core247d.lib; opencv_imgproc247d.lib; opencv_highgui247d.lib;</p>
<p><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/consola5.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>Una vez echo esto, el siguiente código debería compilar</p>
<pre class="cscode"><code><span class="com">// TestOpenCV.cpp: define el punto de entrada de la aplicación de consola.</span>
<span class="com">//</span>

#include <span class="str">"stdafx.h"</span>

#include &lt;opencv2/core/core.hpp&gt;
#include &lt;opencv2/highgui/highgui.hpp&gt;
#include &lt;opencv2/imgproc/imgproc.hpp&gt;
#include &lt;iostream&gt;
#include &lt;<span class="key">string</span>.h&gt;

<span class="key">using</span> <span class="key">namespace</span> cv;
 

<span class="key">int</span> main( <span class="key">int</span> argc, <span class="key">char</span>** argv )
{
    
    <span class="key">return</span> 0;
   
}
 </code></pre>
<h3>El algoritmo</h3>
<p><strong>Nuestro objetivo será detectar el borde de la pupila</strong>, es decir obtener un conjunto de puntos que representen ese borde.</p>
<p>Buscaremos rellenar un vector de puntos con el resultado adecuado.</p>
<p>Partiremos de una imagen en disco llamada <em>&#8220;imagen.jpg&#8221;</em> (nombre original verdad?)</p>
<p>El tipo que almacena una imagen en opencv  es &#8220;Mat&#8221;, este tipo de objeto contiene varios campos y métodos públicos bastante obvios de deducir dada su intuitiva nomenclatura iremos detallándolos  según los vayamos utilizando</p>
<p>Para cargar la imagen utilizamos la función &#8220;imread(nombre_fichero_a_cargar, tipo_rgb_gray_&#8230;)&#8221;</p>
<p>Lo primero que debemos hacer es cargar la imagen en memoria para poder tratarla y &#8220;jugar&#8221; con ella.</p>
<pre class="cscode"><code>
 <span class="com">// imagen_color, contendrá la imagen original a tratar</span>
    Mat imagen_color,copia_original;
    Mat imagen_temporal_color;       
    <span class="com">//Leemos el archivo </span>
    imagen_color = imread(nombre_fichero_imagen, IMREAD_COLOR); 
    copia_original= imagen_color.clone();
</code></pre>
<p>&nbsp;</p>
<p><img src="https://i1.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/imagen.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>Las funciones namedWindow e imshow nos permiten mostrar una imagen en pantalla, la primera declara la ventana donde mostrar la imagen decidiendo si el  tamaño de la ventana se puede modificar, la segunda carga la imagen en esa ventana</p>
<pre class="cscode"><code>    
    <span class="com">//Creamos una ventana para mostrar la imagen original</span>
    namedWindow( <span class="str">"Imagen Original"</span>,cv::WINDOW_NORMAL );
    <span class="com">//Mostramos la imagen original</span>
    imshow( <span class="str">"Imagen Original"</span>, imagen_color ); 
	</code>
</pre>
<p>Aplicaremos un filtro Gaussiano con el objetivo de difuminar la imagen  y eliminar posible ruido en los pixeles http://en.wikipedia.org/wiki/Gaussian_blur</p>
<pre class="cscode"><code>
     <span class="com">//Difuminamos para quitar ruido</span>
    GaussianBlur( imagen_color, imagen_color, Size( 3, 3 ), 0, 0 );
</code>
</pre>
<p>&nbsp;</p>
<p>Transformamos a escala de image_grises</p>
<p>&nbsp;</p>
<pre class="cscode"><code>
      cv::cvtColor(imagen_color, image_gris, CV_BGR2GRAY);
</code>
</pre>
<p><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/image_gris.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>Aplicamos el umbral para transformar a blanco y negro. La imagen está en escala de grises, es decir, tiene un sólo canal</p>
<p>con valores de 0 a 255, aplicar un umbral será decir que los valores por debajo de un valor pasen a 0 y los valores por encima de ese valor pasen a blanco. Por lo tanto obtendremos una imagen binaria.</p>
<pre class="cscode"><code>
   
   
    <span class="com">//Aplicamos el umbral para transformar a blanco y negro</span>
    cv::threshold(image_gris,image_gris,0.4*sum(image_gris)[0]/(image_gris.cols*image_gris.rows),255,cv::THRESH_BINARY );
    
	</code>
</pre>
<p><img src="https://i1.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/bw.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>&nbsp;</p>
<p>Con las siguientes funciones que obtendremos un  pseudo-histograma horizontal y vertical para detectar la posición del máximo absoluto.</p>
<p>Como hemos visto, tenemos un imagen binaria, los pixeles o bien son negros o bien son blancos.</p>
<p>El histograma horizontal que buscamos es la gráfica del sumatorio de pixeles por columna, realmente es una función f(x) cuyo dominio va de 0 al número de columnas y cuyo valor en cada punto del dominio f(x0), será la suma de los pixels para la columna x0.</p>
<p>Haremos lo mismo con el histograma vertical, suavizaremos la curva obtenida y obtendremos el valor máximo.</p>
<pre class="cscode"><code>
  
<span class="key">void</span> SuavizaCurva(vector&lt;<span class="key">int</span>&gt;&amp;suma_negros_columnas);
vector&lt;<span class="key">int</span>&gt;  DameHistogramaHorizontal(<span class="key">const</span> Mat &amp; gray);
vector&lt;<span class="key">int</span>&gt;  DameHistogramaVertical(<span class="key">const</span> Mat &amp; gray);
<span class="key">int</span> DamePosicionDelMaximo(vector&lt;<span class="key">int</span>&gt; suma_negros_columnas);
<span class="key">int</span> DamePuntoSuperiorMaximo(vector&lt;<span class="key">int</span>&gt; suma_negros_columnas, <span class="key">int</span> umbral);
<span class="key">int</span> DamePuntoInferiorMaximo(vector&lt;<span class="key">int</span>&gt; suma_negros_columnas, <span class="key">int</span> umbral);

	</code>
</pre>
<p>Podemos mostrar la proyección de pixels que hemos calculado.</p>
<pre class="cscode"><code>
	<span class="com">//Mostramos la proyección de pixels </span>
    <span class="key">for</span>(<span class="key">int</span> i=0;i&lt;image_gris.cols;i++)
    { 
        cv::line(imagen_temporal_color,cv::Point(i,0),cv::Point(i,suma_negros_columnas[i]),Scalar(0,0,255), 3, 8, 0 );
    }
	  <span class="key">for</span>(<span class="key">int</span> i=0;i&lt;image_gris.rows;i++)
    { 
        cv::line(imagen_temporal_color,cv::Point(0,i),cv::Point(suma_negros_filas[i],i),Scalar(255,0,0), 3, 8, 0 );
    }
	
	</code>
</pre>
<p><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/imagen_temporal_color.jpg?w=848" alt="" data-recalc-dims="1" /></p>
<p>Como podemos observar, hay un conjunto de puntos que acompañan al máximo, que destacan sobre el resto de la gráfica y que pertenecerán al conjunto de puntos buscado.</p>
<p>Una vez que hemos detectado la posible zona de ubicación de la pupila, nos queda recortar esta zona aplicar el agoritmo de detección de bordes de  Canny  http://es.wikipedia.org/wiki/Algoritmo_de_Canny   y mostraremos los resultados</p>
<p>&nbsp;</p>
<pre class="cscode"><code>
 
 recorte_color=copia_original(cv::Rect(x_0 -dx   ,y_0-dy , (x_1-x_0 +2*dx) ,(y_1-y_0 +2*dy)  ) ).clone();
    namedWindow( <span class="str">"recorte_color"</span>,cv::WINDOW_NORMAL );
    imshow( <span class="str">"recorte_color"</span>, recorte_color ); 
    Mat recorte_gris;
            cv::imwrite(<span class="str">"recorte_color.jpg"</span>,recorte_color);
    cv::cvtColor(recorte_color,recorte_gris, CV_BGR2GRAY);
     
    namedWindow( <span class="str">"recorte_gris"</span>,cv::WINDOW_NORMAL );
    imshow( <span class="str">"recorte_gris"</span>, recorte_gris );  
    cv::imwrite(<span class="str">"recorte_gris.jpg"</span>,recorte_gris);
    <span class="com">//Difuminamos la imagen</span>
    blur( recorte_gris, matriz_deteccion, Size(3,3) );
    <span class="com">//Aplicamos el algoritmo de detección de bordes de Canny</span>
    <span class="com">//http://es.wikipedia.org/wiki/Algoritmo_de_Canny</span>
	
	
	
   Canny( matriz_deteccion, matriz_deteccion, 30, 180, 3 );
    
	 <span class="com">//Invertimos los colores</span>
    bitwise_not(matriz_deteccion,matriz_deteccion);
    <span class="com">//Aplicamos una erosión </span>
    cv::erode(matriz_deteccion,matriz_deteccion,Mat());

    namedWindow( <span class="str">"Canny"</span>, WINDOW_NORMAL );
    imshow( <span class="str">"Canny"</span>, matriz_deteccion );
    cv::imwrite(<span class="str">"Canny.jpg"</span>,matriz_deteccion);
     <span class="com">// Mostramos los bordes detectados en el recorte</span>
    Mat  dst =   Mat(recorte_color.size(),recorte_color.type(),Scalar::all(255));<span class="com">//.clone();</span>
    recorte_color.copyTo( dst, matriz_deteccion);
    namedWindow( <span class="str">"detección"</span>, WINDOW_NORMAL );
    imshow( <span class="str">"detección"</span>, dst );
   cv::imwrite(<span class="str">"dst.jpg"</span>,dst);
    <span class="com">//Llenamos el vector de puntos que estabamos buscando</span>
    <span class="key">for</span>(<span class="key">int</span> i=0;i&lt;matriz_deteccion.cols ;i++)
    {
        <span class="key">for</span>(<span class="key">int</span> j=0;j&lt;matriz_deteccion.rows;j++)
        {
            <span class="com">//Hay que tener en cuenta que los puntos detectados están en el recorte</span>
            <span class="com">//Por eso, habrá que sumarles los desplazamientos</span>
            <span class="key">if</span>(matriz_deteccion.at&lt;uchar&gt;(cv::Point(i,j))==0)
                vector_puntos.push_back(cv::Point(i+x_0 -dx ,j+y_0-dy ));
        }
    } 
    <span class="com">//Mostramos el resultado</span>
    <span class="key">for</span>(<span class="key">int</span> i=0;i&lt;vector_puntos.size() ;i++)
    {
        cv::circle(copia_original,vector_puntos[i],0.1,cv::Scalar(255,0,0),0.1);
    } 
    namedWindow( <span class="str">"resultado"</span>, WINDOW_NORMAL );
    imshow( <span class="str">"resultado"</span>, copia_original );
	</code>
</pre>
<p>&nbsp;</p>
<p>Por último mostramos el resultado</p>
<p><img src="https://i2.wp.com/crearpdf.es.anemone.arvixe.com/wp-content/uploads/2016/11/resultado.jpg?w=848" alt="" data-recalc-dims="1" /></p>
</div>
<div class="blogdate"><span id="ctl00_mainContent_ctl00_postList_rptBlogs_ctl00_spnAuthor" class="blogauthor">Publicado por Admin</span> <span id="ctl00_mainContent_ctl00_postList_rptBlogs_ctl00_spnBottomDate" class="bdate">jueves, 20 de febrero de 2014 14:25:00</span></div>
]]></content:encoded>
			<wfw:commentRss>/2016/12/11/deteccion-de-pupila-con-vision-artificial-paso-a-paso/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">4</post-id>	</item>
	</channel>
</rss>

<!-- Dynamic page generated in 0.406 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2017-10-07 17:53:30 -->
